{"name":"CheckIt","tagline":"Simple, flexible validations for node.js and the browser","body":"\r\nCheckIt\r\n===============\r\n\r\n[![Build Status](https://travis-ci.org/tgriesser/checkit.png)](https://travis-ci.org/tgriesser/checkit)\r\n\r\n## Simple validations for node.js and the browser\r\n\r\nThe CheckIt library aims to be a lightweight, flexible, validation library,\r\nwith no dependence on the DOM, targeting both Node.js and the browser.\r\n\r\nCheckIt depends on [underscore.js](http://underscorejs.org), the underscore.function.predicates.js\r\nof [underscore-contrib](https://github.com/documentcloud/underscore-contrib) and (optionally)\r\n[when.js](https://github.com/cujojs/when) for using the library asynchronously with promises. If you\r\nwish to use when, but would rather use browser globals than a package manager, a shimmed version of\r\nwhen is included in the `/lib` directory for your convenience.\r\n\r\n## Getting Started\r\n\r\nCreating a CheckIt object starts with specifying a **target** to be validated, as well as an optional\r\n**options** object to help setup the validation settings such as **language** and **async**.\r\n\r\n```js\r\nvar validator  = CheckIt(target, options);\r\n```\r\n\r\n## Validating an object\r\n\r\nThe `run` method passes through to `runAsync` or `runSync` depending on whether the async flag is set globally or in the\r\noptions passed to the `CheckIt` object.\r\n\r\n```js\r\nvalidator.run(validations);\r\n```\r\n\r\n### Methods:\r\n\r\n**setLabels(labels)**\r\n\r\nApplies the labels for the current validation values, so error messages aren't weird looking and such.\r\n\r\n**applyToAll(rules)**\r\n\r\nTakes a rule, or array of rules to be applied against each item in the validation target.\r\n\r\n**run([rules])**\r\n\r\nThe rules are optional, particularly\r\n\r\n### Validation options:\r\n\r\nIf no language is specified, then the value of `CheckIt.defaultLanguage` will\r\nbe used (defaults to \"en\").\r\n\r\n## Errors:\r\n\r\nThe `CheckIt.Error` object is used to handle all errors. If a validation is run synchronously,\r\nthe validation will return false and this value will be set to the `.validationError` property\r\non the currently validating instance. If the validation is run asynchronously, this error will\r\nbe passed in rejecting the promise.\r\n\r\n### CheckIt.Error Methods\r\n\r\n**get(key)**\r\n\r\nGets the array of validation error messages for a particular key off the validation object.\r\n\r\n**first(key)**\r\n\r\nGets the first of validation error messages for a particular key.\r\n\r\n**toJSON([all])**\r\n\r\nTurns the validation errors into a hash. If the optional **all** is set to true, then it\r\nreturns an array of messages rather than the first validation message for each error key.\r\n\r\n**toString()**\r\n\r\nA string saying how many errors have been triggered total in the current validation.\r\n\r\n---\r\n\r\n### Example:\r\n\r\n```js\r\nvar example = {\r\n  'user' : 'Joe User',\r\n  'email' : 'joe@example.com',\r\n  'password' : '123',\r\n  'password_confirm' : '456'\r\n};\r\n```\r\n\r\n#### Example 1: Simple Validation\r\n\r\n```js\r\nCheckIt(example).run({\r\n  'user'     : ['required', 'alphaDash', 'maxLength:255'],\r\n  'email'    : ['required', 'validEmail'],\r\n  'password' : ['required']\r\n  'password_confirm': ['matchesField:password']\r\n}).then(function(validator) {\r\n\r\n}, function(err) {\r\n\r\n});\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}